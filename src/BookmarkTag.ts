/**
 * BookmarkTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {BookmarkResponse} from "./BookmarkResponse";
import {Fields} from "./Fields";
import {SingleTweet} from "./SingleTweet";
import {TweetCollection} from "./TweetCollection";

export class BookmarkTag extends TagAbstract {
    /**
     * Allows you to get an authenticated user's 800 most recent bookmarked Tweets.
     *
     * @returns {Promise<TweetCollection>}
     * @throws {ClientException}
     */
    public async getAll(userId: string, expansions?: string, paginationToken?: string, fields?: Fields): Promise<TweetCollection> {
        const url = this.parser.url('/2/users/:user_id/bookmarks', {
            'user_id': userId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
                'expansions': expansions,
                'pagination_token': paginationToken,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        try {
            const response = await this.httpClient.request<TweetCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<BookmarkResponse>}
     * @throws {ClientException}
     */
    public async create(userId: string, payload: SingleTweet): Promise<BookmarkResponse> {
        const url = this.parser.url('/2/users/:user_id/bookmarks', {
            'user_id': userId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<BookmarkResponse>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<BookmarkResponse>}
     * @throws {ClientException}
     */
    public async delete(userId: string, tweetId: string): Promise<BookmarkResponse> {
        const url = this.parser.url('/2/users/:user_id/bookmarks/:tweet_id', {
            'user_id': userId,
            'tweet_id': tweetId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'DELETE',
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<BookmarkResponse>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
