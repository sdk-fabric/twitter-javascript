"""
TweetTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen

from tweet import Tweet
from tweet_collection_response import TweetCollectionResponse
from tweet_create_response import TweetCreateResponse
from tweet_delete_response import TweetDeleteResponse
from tweet_entity_response import TweetEntityResponse

class TweetTag(sdkgen.TagAbstract):
    def __init__(self, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)
    pass


    """
    Returns a variety of information about the Tweet specified by the requested ID or list of IDs.
    """
    def get_all(self, ids: str, expansions: str, media_fields: str, place_fields: str, poll_fields: str, tweet_fields: str, user_fields: str) -> TweetCollectionResponse:
        try:
            pathParams = {}

            queryParams = {}
            queryParams["ids"] = ids
            queryParams["expansions"] = expansions
            queryParams["media.fields"] = media_fields
            queryParams["place.fields"] = place_fields
            queryParams["poll.fields"] = poll_fields
            queryParams["tweet.fields"] = tweet_fields
            queryParams["user.fields"] = user_fields

            url = self.parser.url("/2/tweets", pathParams)

            headers = {}

            response = self.http_client.get(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return TweetCollectionResponse.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass

    """
    Returns a variety of information about a single Tweet specified by the requested ID.
    """
    def get(self, id: str, expansions: str, media_fields: str, place_fields: str, poll_fields: str, tweet_fields: str, user_fields: str) -> TweetEntityResponse:
        try:
            pathParams = {}
            pathParams["id"] = id

            queryParams = {}
            queryParams["expansions"] = expansions
            queryParams["media.fields"] = media_fields
            queryParams["place.fields"] = place_fields
            queryParams["poll.fields"] = poll_fields
            queryParams["tweet.fields"] = tweet_fields
            queryParams["user.fields"] = user_fields

            url = self.parser.url("/2/tweets/:id", pathParams)

            headers = {}

            response = self.http_client.get(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return TweetEntityResponse.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass

    """
    Creates a Tweet on behalf of an authenticated user.
    """
    def create(self, payload: Tweet) -> TweetCreateResponse:
        try:
            pathParams = {}

            queryParams = {}

            url = self.parser.url("/2/tweets", pathParams)

            headers = {}
            headers["Content-Type"] = "application/json"

            response = self.http_client.post(url, headers=headers, params=queryParams, data=payload.to_json())

            if response.status_code >= 200 and response.status_code < 300:
                return TweetCreateResponse.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass

    """
    Allows a user or authenticated user ID to delete a Tweet.
    """
    def delete(self, id: str) -> TweetDeleteResponse:
        try:
            pathParams = {}
            pathParams["id"] = id

            queryParams = {}

            url = self.parser.url("/2/tweets/:id", pathParams)

            headers = {}

            response = self.http_client.delete(url, headers=headers, params=queryParams)

            if response.status_code >= 200 and response.status_code < 300:
                return TweetDeleteResponse.from_json(response.content)


            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except Exception as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))
    pass


