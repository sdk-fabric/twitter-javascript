/**
 * TweetTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Errors} from "./Errors";
import {ErrorsException} from "./ErrorsException";
import {Fields} from "./Fields";
import {HideReply} from "./HideReply";
import {HideReplyResponse} from "./HideReplyResponse";
import {Tweet} from "./Tweet";
import {TweetCollection} from "./TweetCollection";
import {TweetCreateResponse} from "./TweetCreateResponse";
import {TweetDeleteResponse} from "./TweetDeleteResponse";
import {TweetEntity} from "./TweetEntity";
import {UserCollection} from "./UserCollection";

export class TweetTag extends TagAbstract {
    /**
     * Returns a variety of information about the Tweet specified by the requested ID or list of IDs.
     *
     * @returns {Promise<TweetCollection>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async getAll(ids?: string, expansions?: string, fields?: Fields): Promise<TweetCollection> {
        const url = this.parser.url('/2/tweets', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'ids': ids,
                'expansions': expansions,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as TweetCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a variety of information about a single Tweet specified by the requested ID.
     *
     * @returns {Promise<TweetEntity>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async get(tweetId: string, expansions?: string, fields?: Fields): Promise<TweetEntity> {
        const url = this.parser.url('/2/tweets/:tweet_id', {
            'tweet_id': tweetId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'expansions': expansions,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as TweetEntity;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Creates a Tweet on behalf of an authenticated user.
     *
     * @returns {Promise<TweetCreateResponse>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async create(payload: Tweet): Promise<TweetCreateResponse> {
        const url = this.parser.url('/2/tweets', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as TweetCreateResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Allows a user or authenticated user ID to delete a Tweet.
     *
     * @returns {Promise<TweetDeleteResponse>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async delete(tweetId: string): Promise<TweetDeleteResponse> {
        const url = this.parser.url('/2/tweets/:tweet_id', {
            'tweet_id': tweetId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as TweetDeleteResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Hides or unhides a reply to a Tweet.
     *
     * @returns {Promise<HideReplyResponse>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async hideReply(tweetId: string, payload: HideReply): Promise<HideReplyResponse> {
        const url = this.parser.url('/2/tweets/:tweet_id/hidden', {
            'tweet_id': tweetId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as HideReplyResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Allows you to get information about a Tweetâ€™s liking users.
     *
     * @returns {Promise<UserCollection>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async getLikingUsers(tweetId: string, expansions?: string, maxResults?: number, paginationToken?: string): Promise<UserCollection> {
        const url = this.parser.url('/2/tweets/:tweet_id/liking_users', {
            'tweet_id': tweetId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'expansions': expansions,
                'max_results': maxResults,
                'pagination_token': paginationToken,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as UserCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
