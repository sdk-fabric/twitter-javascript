/**
 * UserTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Errors} from "./Errors";
import {ErrorsException} from "./ErrorsException";
import {Fields} from "./Fields";
import {LikeResponse} from "./LikeResponse";
import {Pagination} from "./Pagination";
import {SingleTweet} from "./SingleTweet";
import {TweetCollection} from "./TweetCollection";
import {User} from "./User";
import {UserCollection} from "./UserCollection";

export class UserTag extends TagAbstract {
    /**
     * Returns a variety of information about one or more users specified by the requested IDs.
     *
     * @returns {Promise<UserCollection>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async getAll(ids?: string, expansions?: string, fields?: Fields): Promise<UserCollection> {
        const url = this.parser.url('/2/users', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'ids': ids,
                'expansions': expansions,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as UserCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a variety of information about a single user specified by the requested ID.
     *
     * @returns {Promise<User>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async get(userId: string, expansions?: string, fields?: Fields): Promise<User> {
        const url = this.parser.url('/2/users/:user_id', {
            'user_id': userId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'expansions': expansions,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as User;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow. This endpoint can return every Tweet created on a timeline over the last 7 days as well as the most recent 800 regardless of creation date.
     *
     * @returns {Promise<TweetCollection>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async getTimeline(userId: string, exclude?: string, expansions?: string, pagination?: Pagination, fields?: Fields): Promise<TweetCollection> {
        const url = this.parser.url('/2/users/:user_id/timelines/reverse_chronological', {
            'user_id': userId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'exclude': exclude,
                'expansions': expansions,
                'pagination': pagination,
                'fields': fields,
            }, [
                'pagination',
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as TweetCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Tweets liked by a user
     *
     * @returns {Promise<TweetCollection>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async getLikedTweets(userId: string, expansions?: string, maxResults?: number, paginationToken?: string, fields?: Fields): Promise<TweetCollection> {
        const url = this.parser.url('/2/users/:user_id/liked_tweets', {
            'user_id': userId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'expansions': expansions,
                'max_results': maxResults,
                'pagination_token': paginationToken,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as TweetCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Allows a user or authenticated user ID to unlike a Tweet.
     *
     * @returns {Promise<LikeResponse>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async removeLike(userId: string, tweetId: string): Promise<LikeResponse> {
        const url = this.parser.url('/2/users/:user_id/likes/:tweet_id', {
            'user_id': userId,
            'tweet_id': tweetId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as LikeResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Causes the user ID identified in the path parameter to Like the target Tweet.
     *
     * @returns {Promise<LikeResponse>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async createLike(userId: string, payload: SingleTweet): Promise<LikeResponse> {
        const url = this.parser.url('/2/users/:user_id/likes', {
            'user_id': userId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as LikeResponse;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a variety of information about one or more users specified by their usernames.
     *
     * @returns {Promise<UserCollection>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async findByName(usernames?: string, expansions?: string, fields?: Fields): Promise<UserCollection> {
        const url = this.parser.url('/2/users/by', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'usernames': usernames,
                'expansions': expansions,
                'fields': fields,
            }, [
                'fields',
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as UserCollection;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns information about an authorized user.
     *
     * @returns {Promise<User>}
     * @throws {ErrorsException}
     * @throws {ClientException}
     */
    public async getMe(expansions?: string, fields?: string): Promise<User> {
        const url = this.parser.url('/2/users/me', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'expansions': expansions,
                'fields': fields,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as User;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorsException(await response.json() as Errors);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
